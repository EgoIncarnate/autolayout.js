{
  function extend(dst) {
    for (var i = 1; i < arguments.length; i++) {
      for (var k in arguments[i]) {
        dst[k] = arguments[i][k];
      }
    }
    return dst;
  }
}

visualFormatString
  = o:(orientation ":")?
    superto:(superview connection)?
    view:view
    views:(connection view)*
    tosuper:(connection superview)?
    comments:comments?
  { return {
      orientation: o ? o[0] : 'horizontal',
      cascade: (superto || []).concat(
        [view],
        [].concat.apply([], views),
        (tosuper || [])
      )
    }
  }

orientation
  = orient:("H" / "V" / "Z") { return (orient == 'H') ? 'horizontal' : ((orient == 'V') ? 'vertical' : 'zIndex') }

comments
  = " "* "//" .*

superview
  = "|" { return { view: null } }

view
  = "[" view:viewName predicates:predicateListWithParens? cascadedViews:cascadedViews? "]"
  { return extend(extend(view, predicates ? { constraints: predicates } : {}), cascadedViews ? {
    cascade: cascadedViews
  } : {}) }

cascadedViews
  = ":" views:(connection view)+ connection:connection { return [].concat([].concat.apply([], views),[connection]); }

connection
  = "-" predicateList:predicateList "-" { return predicateList }
  / "-" { return [{ relation: 'equ', constant: 'default', $parserOffset: offset() }] }
  / "~" predicateList:equalSpacingPredicateList "~" { return predicateList }
  / "~" { return [{ relation: 'equ', equalSpacing: true, $parserOffset: offset() }] }
  / "" { return [{ relation: 'equ', constant: 0, $parserOffset: offset() }] }

predicateList
  = simplePredicate
  / predicateListWithParens

simplePredicate
  = n:number { return [{ relation: 'equ', constant: n, $parserOffset: offset() }] }

predicateListWithParens
  = "(" p:predicate ps:("," predicate)* ")"
  { return [p].concat(ps.map(function(p){ return p[1] })) }

predicate
  = r:relation? o:objectOfPredicate p:("@" priority)?
  { return extend({ relation: 'equ' }, (r || {}), o, (p ? p[1]: {})) }

equalSpacingPredicateList
  = "(" p:equalSpacingPredicate ps:("," equalSpacingPredicate)* ")" { return [p].concat(ps.map(function(p){ return p[1] })) }

equalSpacingPredicate
  = r:relation? o:objectOfPredicate p:("@" priority)?
  { return extend({ relation: 'equ', equalSpacing: true }, (r || {}), o, (p ? p[1]: {})) }

relation
  = "==" { return { relation: 'equ', $parserOffset: offset() } }
  / "<=" { return { relation: 'leq', $parserOffset: offset() } }
  / ">=" { return { relation: 'geq', $parserOffset: offset() } }

objectOfPredicate
  = percentage
  / constant
  / viewPredicate
  /*/ variable*/

priority
  = n:number { return { priority: n } }

constant
  = n:number { return { constant: n } }

percentage
  = n:number '%' { return { view: null, multiplier: n / 100 } }

viewPredicate
  = vn:viewName a:attribute? m:multiplier? c:constantExpr? { return { view: vn.view, attribute: a ? a : undefined, multiplier: m ? m : 1, constant: c ? c : undefined } }

attribute
  = '.left' { return 'left'}
  / '.right' { return 'right'}
  / '.top' { return 'top'}
  / '.bottom' { return 'bottom'}
  / '.width' { return 'width'}
  / '.height' { return 'height'}
  / '.centerX' { return 'centerX'}
  / '.centerY' { return 'centerY'}

multiplier
  = "/" n:number { return 1 / n; }
  / "*" n:number { return n; }

constantExpr
  = "-" n:number { return -n; }
  / "+" n:number { return n; }

viewName
  = f:$[a-zA-Z_]+ v:$[a-zA-Z0-9_]* { return { view: f + v } }

/*variable
  = "{" v:$[a-zA-Z0-9\-_]+ "}" { return { variable: v } }
*/

number
  = digits:[0-9]+ { return parseInt(digits.join(""), 10); }
